// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.Services.Analytics
{
    public class AnalyticsLifetime : UnityEngine.MonoBehaviour
    {
        public AnalyticsLifetime() {}
    }

    public class ConsentCheckException : Unity.Services.Core.RequestFailedException
    {
        [UnityEngine.Scripting.Preserve] public Unity.Services.Analytics.ConsentCheckExceptionReason Reason { get; }
        public ConsentCheckException(Unity.Services.Analytics.ConsentCheckExceptionReason reason, int errorCode, string message, System.Exception innerException) {}
    }

    [UnityEngine.Scripting.Preserve] public enum ConsentCheckExceptionReason
    {
        public const Unity.Services.Analytics.ConsentCheckExceptionReason ConsentFlowNotKnown = 4;
        public const Unity.Services.Analytics.ConsentCheckExceptionReason DeserializationIssue = 1;
        public const Unity.Services.Analytics.ConsentCheckExceptionReason InvalidConsentFlow = 3;
        public const Unity.Services.Analytics.ConsentCheckExceptionReason NoInternetConnection = 2;
        public const Unity.Services.Analytics.ConsentCheckExceptionReason Unknown = 0;
        public int value__;
    }

    public static class ContainerObject
    {
        public static void DestroyContainer();
    }

    public static class Events
    {
        public static readonly string PrivacyUrl;
        [System.Obsolete(@"Use the provided event methods to send events - the buffer will be removed in a future release.")] public static Unity.Services.Analytics.Internal.IBuffer Buffer { get; }
        public static void AdImpression(Unity.Services.Analytics.Events.AdImpressionArgs args);
        [System.Diagnostics.DebuggerStepThrough] [System.Runtime.CompilerServices.AsyncStateMachine(typeof(Unity.Services.Analytics.Events.<CheckForRequiredConsents>d__5))] public static System.Threading.Tasks.Task<System.Collections.Generic.List<string>> CheckForRequiredConsents();
        public static void CustomData(string eventName, System.Collections.Generic.IDictionary<string, object> eventParams);
        public static void Flush();
        public static void OptOut();
        public static void ProvideOptInConsent(string identifier, bool consent);
        public static void Transaction(Unity.Services.Analytics.Events.TransactionParameters transactionParameters);
        public enum AdCompletionStatus
        {
            public const Unity.Services.Analytics.Events.AdCompletionStatus Completed = 0;
            public const Unity.Services.Analytics.Events.AdCompletionStatus Incomplete = 2;
            public const Unity.Services.Analytics.Events.AdCompletionStatus Partial = 1;
            public int value__;
        }
        public class AdImpressionArgs
        {
            public Unity.Services.Analytics.Events.AdCompletionStatus AdCompletionStatus { get; set; }
            public System.Nullable<double> AdEcpmUsd { get; set; }
            public System.Nullable<bool> AdHasClicked { get; set; }
            public string AdImpressionID { get; set; }
            public System.Nullable<long> AdLengthMs { get; set; }
            public string AdMediaType { get; set; }
            public Unity.Services.Analytics.Events.AdProvider AdProvider { get; set; }
            public string AdSource { get; set; }
            public string AdStatusCallback { get; set; }
            public string AdStoreDstID { get; set; }
            public System.Nullable<long> AdTimeCloseButtonShownMs { get; set; }
            public System.Nullable<long> AdTimeWatchedMs { get; set; }
            public string PlacementID { get; set; }
            public string PlacementName { get; set; }
            public string PlacementType { get; set; }
            public string SdkVersion { get; set; }
            public AdImpressionArgs(Unity.Services.Analytics.Events.AdCompletionStatus adCompletionStatus, Unity.Services.Analytics.Events.AdProvider adProvider, string placementID, string placementName) {}
        }
        public enum AdProvider
        {
            public const Unity.Services.Analytics.Events.AdProvider AdColony = 0;
            public const Unity.Services.Analytics.Events.AdProvider AdMob = 1;
            public const Unity.Services.Analytics.Events.AdProvider Amazon = 2;
            public const Unity.Services.Analytics.Events.AdProvider AppLovin = 3;
            public const Unity.Services.Analytics.Events.AdProvider ChartBoost = 4;
            public const Unity.Services.Analytics.Events.AdProvider Facebook = 5;
            public const Unity.Services.Analytics.Events.AdProvider Fyber = 6;
            public const Unity.Services.Analytics.Events.AdProvider Hyprmx = 7;
            public const Unity.Services.Analytics.Events.AdProvider Inmobi = 8;
            public const Unity.Services.Analytics.Events.AdProvider IrnSource = 14;
            public const Unity.Services.Analytics.Events.AdProvider Maio = 9;
            public const Unity.Services.Analytics.Events.AdProvider Other = 15;
            public const Unity.Services.Analytics.Events.AdProvider Pangle = 10;
            public const Unity.Services.Analytics.Events.AdProvider Tapjoy = 11;
            public const Unity.Services.Analytics.Events.AdProvider UnityAds = 12;
            public int value__;
            public const Unity.Services.Analytics.Events.AdProvider Vungle = 13;
        }
        public struct Item
        {
            public long itemAmount;
            public string itemName;
            public string itemType;
        }
        public struct Product
        {
            public System.Collections.Generic.List<Unity.Services.Analytics.Events.Item> items;
            public System.Nullable<Unity.Services.Analytics.Events.RealCurrency> realCurrency;
            public System.Collections.Generic.List<Unity.Services.Analytics.Events.VirtualCurrency> virtualCurrencies;
        }
        public struct RealCurrency
        {
            public long realCurrencyAmount;
            public string realCurrencyType;
        }
        public struct TransactionParameters
        {
            [System.Obsolete] public System.Nullable<bool> isInitiator;
            public string paymentCountry;
            public string productID;
            public Unity.Services.Analytics.Events.Product productsReceived;
            public Unity.Services.Analytics.Events.Product productsSpent;
            public System.Nullable<long> revenueValidated;
            public string storeID;
            public string storeItemID;
            public string storeItemSkuID;
            public string storeSourceID;
            public string transactionID;
            public string transactionName;
            public string transactionReceipt;
            public string transactionReceiptSignature;
            public System.Nullable<Unity.Services.Analytics.Events.TransactionServer> transactionServer;
            public Unity.Services.Analytics.Events.TransactionType transactionType;
            public string transactorID;
        }
        public enum TransactionServer
        {
            public const Unity.Services.Analytics.Events.TransactionServer AMAZON = 1;
            public const Unity.Services.Analytics.Events.TransactionServer APPLE = 0;
            public const Unity.Services.Analytics.Events.TransactionServer GOOGLE = 2;
            public int value__;
        }
        public enum TransactionType
        {
            public const Unity.Services.Analytics.Events.TransactionType INVALID = 0;
            public const Unity.Services.Analytics.Events.TransactionType PURCHASE = 2;
            public const Unity.Services.Analytics.Events.TransactionType SALE = 1;
            public const Unity.Services.Analytics.Events.TransactionType TRADE = 3;
            public int value__;
        }
        public struct VirtualCurrency
        {
            public long virtualCurrencyAmount;
            public string virtualCurrencyName;
            public string virtualCurrencyType;
        }
    }

    [System.Obsolete] public class NewPlayerHelper
    {
        [System.Obsolete] public NewPlayerHelper(Unity.Services.Core.Device.Internal.IInstallationId installId) {}
        [System.Obsolete] public bool IsNewPlayer();
    }

    public static class SdkVersion
    {
        public static readonly string SDK_VERSION;
    }
}

namespace Unity.Services.Analytics.Internal
{
    [System.Obsolete(@"Don't interact with the buffer directly - use the methods on the Events class to send events instead. This will be removed in a future release")] public class Buffer : Unity.Services.Analytics.Internal.IBuffer
    {
        public virtual string InstallID { get; set; }
        public virtual string PlayerID { get; set; }
        public virtual string SessionID { get; set; }
        public virtual string UserID { get; set; }
        public Buffer() {}
        public virtual void ClearBuffer();
        public virtual void ClearDiskCache();
        public virtual System.Collections.Generic.List<Unity.Services.Analytics.Internal.Buffer.Token> CloneTokens();
        public virtual void FlushToDisk();
        public virtual void InsertTokens(System.Collections.Generic.List<Unity.Services.Analytics.Internal.Buffer.Token> tokens);
        public virtual void LoadFromDisk();
        public virtual void PushArrayEnd();
        public virtual void PushArrayStart(string name = default(string));
        public virtual void PushBool(bool val, string name = default(string));
        public virtual void PushDouble(double val, string name = default(string));
        public virtual void PushEndEvent();
        public virtual void PushEvent(Unity.Services.Analytics.Internal.Event evt);
        public virtual void PushFloat(float val, string name = default(string));
        public virtual void PushInt(int val, string name = default(string));
        public virtual void PushInt64(long val, string name = default(string));
        public virtual void PushObjectEnd();
        public virtual void PushObjectStart(string name = default(string));
        public virtual void PushStartEvent(string name, System.DateTime datetime, System.Nullable<long> eventVersion, bool addPlayerIdsToEventBody = False);
        public virtual void PushString(string val, string name = default(string));
        public virtual void PushTimestamp(System.DateTime val, string name);
        public static string SaveDateTime(System.DateTime dateTime);
        public virtual string Serialize(System.Collections.Generic.List<Unity.Services.Analytics.Internal.Buffer.Token> tokens);
        [System.Obsolete(@"Don't interact with the buffer tokens directly - use the methods on the Events class to send events instead. This will be removed in a future release")] public struct Token
        {
            public object Data;
            public string Name;
            public Unity.Services.Analytics.Internal.Buffer.TokenType Type;
        }
        [System.Obsolete(@"Don't interact with the buffer tokens directly - use the methods on the Events class to send events instead. This will be removed in a future release")] public enum TokenType
        {
            public const Unity.Services.Analytics.Internal.Buffer.TokenType Boolean = 8;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventArrayEnd = 7;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventArrayStart = 6;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventEnd = 1;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventObjectEnd = 5;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventObjectStart = 4;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventParamsEnd = 3;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventParamsStart = 2;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventStart = 0;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventTimestamp = 13;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType Float64 = 9;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType Int64 = 11;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType StandardEventIds = 14;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType String = 10;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType Timestamp = 12;
            public int value__;
        }
    }

    public class Event
    {
        public string Name { get; }
        public Unity.Services.Analytics.Internal.EventData Parameters { get; }
        public System.Nullable<int> Version { get; }
        public Event(string name, System.Nullable<int> version) {}
    }

    public class EventData
    {
        public System.Collections.Generic.Dictionary<string, object> Data { get; }
        public void AddBatteryLoad();
        public void AddBuildGuuid();
        public void AddClientVersion();
        public void AddConnectionType();
        public void AddGameBundleID();
        public void AddPlatform();
        public void AddStdParamData(string sdkMethod, string uasID);
        public void AddUserCountry();
        public void Set(string key, bool value);
        public void Set(string key, double value);
        public void Set(string key, int value);
        public void Set(string key, long value);
        public void Set(string key, object value);
        public void Set(string key, float value);
        public void Set(string key, string value);
    }

    [System.Obsolete(@"Don't interact with the buffer directly - use the methods on the Events class to send events instead. This will be removed in a future release")] public interface IBuffer
    {
        public abstract string InstallID { get; set; }
        public abstract string PlayerID { get; set; }
        public abstract string SessionID { get; set; }
        public abstract string UserID { get; set; }
        public abstract void ClearBuffer();
        public abstract void ClearDiskCache();
        public abstract System.Collections.Generic.List<Unity.Services.Analytics.Internal.Buffer.Token> CloneTokens();
        public abstract void FlushToDisk();
        public abstract void InsertTokens(System.Collections.Generic.List<Unity.Services.Analytics.Internal.Buffer.Token> tokens);
        public abstract void LoadFromDisk();
        public abstract void PushArrayEnd();
        public abstract void PushArrayStart(string name = default(string));
        public abstract void PushBool(bool val, string name = default(string));
        public abstract void PushDouble(double val, string name = default(string));
        public abstract void PushEndEvent();
        public abstract void PushEvent(Unity.Services.Analytics.Internal.Event evt);
        public abstract void PushFloat(float val, string name = default(string));
        public abstract void PushInt(int val, string name = default(string));
        public abstract void PushInt64(long val, string name = default(string));
        public abstract void PushObjectEnd();
        public abstract void PushObjectStart(string name = default(string));
        public abstract void PushStartEvent(string name, System.DateTime datetime, System.Nullable<long> eventVersion, bool addPlayerIdsToEventBody = False);
        public abstract void PushString(string val, string name = default(string));
        public abstract void PushTimestamp(System.DateTime val, string name = default(string));
        public abstract string Serialize(System.Collections.Generic.List<Unity.Services.Analytics.Internal.Buffer.Token> tokens);
    }
}

namespace Unity.Services.Analytics.Internal.Platform
{
    public static class UserCountry
    {
        public static string Name();
    }
}

namespace Unity.Services.Analytics.Platform
{
    [System.Obsolete] public class DeviceIdentifiers
    {
        [System.Obsolete] public static string Idfa { get; }
        [System.Obsolete] public static string Idfv { get; }
        public DeviceIdentifiers() {}
        [System.Obsolete] public static void SetupIdentifiers();
    }

    public static class Runtime
    {
        public static string Name();
    }
}
